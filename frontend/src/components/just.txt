socket.on('voteUpdate',  ({ eventId, options }) => {
      setEvent(prevEvent => ({ ...prevEvent, options:options }));
      console.log("vote updated successfully")
    });

    return () => {
      socket.off('voteUpdate');
    };
  }, [id]);

  const handleVote = async (optionIndex) => {
    if (hasVoted) return;

    try {
      socket.emit('vote', { eventId:id, optionIndex })
      document.cookie = `voted_${id}=true; path=/; max-age=${24 * 60 * 60}`;
      setHasVoted(true);

    } catch (error) {
      console.error('Error casting vote:', error);
    }

    socket.on('voteError',  ({message}) => {
      console.log(message)
    });
  };

  if (!event) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1>{event.name}</h1>
      <p>{event.description}</p>
      <ul>
        {event.options.map((option, index) => (
          <li key={index}>
            <button onClick={() => handleVote(index)} disabled={hasVoted}>
              {option.name} ({option.votes})
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
};


<label htmlFor="eventName" className="block text-sm font-medium text-gray-700">
          Event Name:
        </label>
        <input
          id="eventName"
          type="text"
          value={eventName}
          onChange={(e) => setEventName(e.target.value)}
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          required
        />
      </div>

      <div>
        <label htmlFor="eventDescription" className="block text-sm font-medium text-gray-700">
          Event Description:
        </label>
        <textarea
          id="eventDescription"
          value={eventDescription}
          onChange={(e) => setEventDescription(e.target.value)}
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          rows="3"
          required
        ></textarea>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">Options:</label>
        {options.map((option, index) => (
          <div key={index} className="space-y-2">
            <input
              type="text"
              value={option.name}
              onChange={(e) => handleOptionChange(index, 'name', e.target.value)}
              placeholder={`Option ${index + 1} Name`}
              className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              required
            />
            <textarea
              value={option.description}
              onChange={(e) => handleOptionChange(index, 'description', e.target.value)}
              placeholder={`Option ${index + 1} Description`}
              className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              rows="2"
            ></textarea>
          </div>
        ))}
        <button
          type="button"
          onClick={handleAddOption}
          className="mt-2 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Add Option
        </button>
      </div>

      <div>
        <label htmlFor="startTime" className="block text-sm font-medium text-gray-700">
          Start Time:
        </label>
        <input
          id="startTime"
          type="datetime-local"
          value={startTime}
          onChange={(e) => setStartTime(e.target.value)}
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          required
        />
      </div>

      <div>
        <label htmlFor="endTime" className="block text-sm font-medium text-gray-700">
          End Time:
        </label>
        <input
          id="endTime"
          type="datetime-local"
          value={endTime}
          onChange={(e) => setEndTime(e.target.value)}
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          required
        />
      </div>

      <button
        type="submit"
        className="mt-4 w-full inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
      >
        Submit
      </button>
      <p className='text-l text-red-500 flex justify-center'>{msg}</p>
    </form>
  </div>